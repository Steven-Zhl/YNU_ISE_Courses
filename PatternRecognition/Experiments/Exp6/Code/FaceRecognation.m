close all;
clear all;
clc;

%----------------------------------- 读取数据 -----------------------------------%
load ORL_trainset; load ORL_testset; load ORL_testlabel; % 载入训练集和测试集
[~, trainnum] = size(train_data);
[~, testnum] = size(test_data); % trainnum 为训练集样本数，testnum 为测试集样本数
classnum = length(unique(train_label)); % 类别数
% 根据resnetLayers的参数格式需求，将训练数据转换为四维数组，将标签转换为category数组
train_data = reshape(train_data, [32 32 1 trainnum]); % 4个维度分别是：高度、宽度、通道数、图像数
train_label = categorical(train_label);
test_data = reshape(test_data, [32 32 1 testnum]);
test_label = categorical(label_truth);
%----------------------------------- 读取数据 -----------------------------------%

%---------------------------------- 数据预处理 ----------------------------------%
imageSize = [32 32 1]; % 图像大小
pixelRange = [-4 4]; % 图像平移范围
% 数据增强，用于增加训练集样本数，防止过拟合；实现方式是对训练集进行随机平移和随机翻转
imageAugmenter = imageDataAugmenter( ...
    RandXReflection = true, ...
    RandXTranslation = pixelRange, ...
    RandYTranslation = pixelRange);
% 将数据增强后的训练集转换为augmentedImageDatastore格式
augimdsTrain = augmentedImageDatastore(imageSize, train_data, train_label, ...
    DataAugmentation = imageAugmenter, ...
    OutputSizeMode = "randcrop");
%---------------------------------- 数据预处理 ----------------------------------%

%------------------------------- 定义网络结构和参数 -------------------------------%
% 定义网络结构：卷积核初始大小为3，初始步长为1，初始数量为16；堆栈深度为[4 3 2]；卷积核数量依次为[16 32 64]
lgraph = resnetLayers(imageSize, classnum, ...
    InitialFilterSize = 3, ...
    InitialNumFilters = 16, ...
    InitialStride = 1, ...
    InitialPoolingLayer = "none", ...
    StackDepth = [4 3 2], ...
    NumFilters = [16 32 64]);
plot(lgraph); % 展示网络结构
% 设置参数：batchSize为48，初始学习率为0.1，最大迭代次数为100，每次迭代后随机打乱训练集，每隔valFrequency次迭代后在测试集上验证一次
miniBatchSize = 48;
valFrequency = floor(size(train_data, 4) / miniBatchSize);
options = trainingOptions("sgdm", ...
    InitialLearnRate = 0.1, ...
    MaxEpochs = 100, ...
    MiniBatchSize = miniBatchSize, ...
    Shuffle = "every-epoch", ...
    Plots = "training-progress", ...
    Verbose = false, ...
    VerboseFrequency = valFrequency, ...
    ValidationData = {test_data, test_label}, ...
    ValidationFrequency = valFrequency, ...
    LearnRateSchedule = "piecewise", ... % 分段学习率
    LearnRateDropFactor = 0.1, ... % 学习率下降因子
    LearnRateDropPeriod = 60); % 学习率下降周期
%------------------------------- 定义网络结构和参数 -------------------------------%

%----------------------------- 训练分类器并计算准确度 -----------------------------%
net = trainNetwork(augimdsTrain, lgraph, options); % 训练分类器
[test_pred, probs] = classify(net, test_data); % 测试集预测结果
test_accuracy = mean(test_pred == test_label); % 测试集分类准确度
train_pred = classify(net, train_data); % 训练集预测结果
train_accuracy = mean(train_pred == train_label); % 训练集分类准确度
disp("Training accuracy: " + train_accuracy * 100 + "%")
disp("Validation accuracy: " + test_accuracy * 100 + "%")
%----------------------------- 训练分类器并计算准确度 -----------------------------%
